Python has many ways to do print formatting. For example, we already did
print("Blah" + meow) and print("Blah", meow). But there are better ways to organize
what you are printing. This includes the format print("{:<#}{:<#}").format("blah",meow)
Inside the curly brackets are :<#. The # represents a number which is however many
units/spaces you want a part to include, the < can also be a > or ^ sign. You can 
also write :+<#, which puts + instead of spaces. So if you write print("{:+>10}".format("meow"))
it will print ++++++meow and if you do the same thing but use a < sign it will print
meow++++++ . print("{:+^10}".format("meow")) will print +++meow+++ . This will work
with two values also, you just need to have another {} and another value in the ("meow")
using a comma. print("*{:+>10}{:+<10}*".format("meow","meow")) prints *++++++meowmeow++++++*
When you are printing integers you will need to have a slightly different format.
print("{:+^10.2f}".format(10.0000000)) . The .2 is the number of digits after the decimal
point that you will be printing, and the f indicates float, which tells the program that 
the number is going to have decimals. (The statement print("{:+^10.2f}".format(10.0000000))
prints ++10.00+++ . Note how the number of +'s on either side of 10.00 is unbalanced due to
the fact that there is a decimal point. Another important thing to know is how to make a function.
In order to make a function, you first need to define it. This is done using the built in def function.
The way that def is used is def functionName(a,b): . The "Placeholder variables" (known as parameters) will be put inside the parentheses.
To call the function, you just do functionName(c,d) and you will use whatever variables you want
to use in the parentheses. So if your function is:
def function(a,b):
	print a
	print b

#And you have variables c and d already defined (c= "c") (d = "d")
#Here you call the function
function(c,d)

#output:
c
d